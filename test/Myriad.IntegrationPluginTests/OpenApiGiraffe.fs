//------------------------------------------------------------------------------
//        This code was generated by myriad.
//        Changes to this file will be lost when the code is regenerated.
//------------------------------------------------------------------------------
module Server

open Giraffe
module Models =
    [<RequireQualifiedAccess>]
    type IngredientId = IngredientId of value: string

    and [<RequireQualifiedAccess>] IngredientName = IngredientName of value: string

    and [<RequireQualifiedAccess>] IngredientImage = IngredientImage of value: string

    and [<RequireQualifiedAccess>] IngredientType =
        | IngredientType0Of2 of value: {| Name: string; Seasons: string [] |}
        | IngredientType1Of2 of value: string

    and [<RequireQualifiedAccess>] Ingredient =
        { Name: IngredientName
          Image: IngredientImage
          Type: IngredientType }

    and [<RequireQualifiedAccess>] ProblemDetail =
        { Type: string
          Title: string
          Status: int
          Detail: string
          Instance: string }

module Operations =
    /// Create a new ingredient
    [<RequireQualifiedAccess>]
    module RegisterIngredient =
        open Models
        /// Create a new ingredient
        [<RequireQualifiedAccess>]
        type Request = { RequestBody: Ingredient }

        and [<RequireQualifiedAccess>] Ingredient =
            { Name: IngredientName
              Image: IngredientImage
              Type: IngredientType }

        and [<RequireQualifiedAccess>] Response =
            | Http201 of value: {| Id: IngredientId |}
            | Http400 of value: (ProblemDetail * {| Violations: {| Field: string; Message: string |} [] |})
            | Http401
            | Http403
            | Default of value: ProblemDetail

        type IHandler =
            val Handle: Request -> Response

        let handle (handler: #IHandler) (request: Request) =
            match handler.Handle request with
            | Response.Http201 value -> text "Post on /ingredients returned Http201"
            | Response.Http400 value -> text "Post on /ingredients returned Http400"
            | Response.Http401 -> text "Post on /ingredients returned Http401"
            | Response.Http403 -> text "Post on /ingredients returned Http403"
            | Response.Default value -> text "Post on /ingredients returned Default"

    [<RequireQualifiedAccess>]
    module GetIngredientById =
        open Models
        [<RequireQualifiedAccess>]
        type Response =
            | Http200 of value: Ingredient
            | Http400 of value: (ProblemDetail * {| Violations: {| Field: string; Message: string |} [] |})
            | Http401
            | Http404 of value: (ProblemDetail * {| Violations: {| Field: string; Message: string |} [] |})
            | Default of value: ProblemDetail

        type IHandler =
            val Handle: unit -> Response

        let handle (handler: #IHandler) =
            match handler.Handle() with
            | Response.Http200 value -> text "Get on /ingredients/{id} returned Http200"
            | Response.Http400 value -> text "Get on /ingredients/{id} returned Http400"
            | Response.Http401 -> text "Get on /ingredients/{id} returned Http401"
            | Response.Http404 value -> text "Get on /ingredients/{id} returned Http404"
            | Response.Default value -> text "Get on /ingredients/{id} returned Default"

    [<RequireQualifiedAccess>]
    module DeleteIngredient =
        open Models
        [<RequireQualifiedAccess>]
        type Response =
            | Http204
            | Http400 of value: (ProblemDetail * {| Violations: {| Field: string; Message: string |} [] |})
            | Http401
            | Http404 of value: (ProblemDetail * {| Violations: {| Field: string; Message: string |} [] |})
            | Default of value: ProblemDetail

        type IHandler =
            val Handle: unit -> Response

        let handle (handler: #IHandler) =
            match handler.Handle() with
            | Response.Http204 -> text "Delete on /ingredients/{id} returned Http204"
            | Response.Http400 value -> text "Delete on /ingredients/{id} returned Http400"
            | Response.Http401 -> text "Delete on /ingredients/{id} returned Http401"
            | Response.Http404 value -> text "Delete on /ingredients/{id} returned Http404"
            | Response.Default value -> text "Delete on /ingredients/{id} returned Default"

    [<RequireQualifiedAccess>]
    module RenameIngredient =
        open Models
        [<RequireQualifiedAccess>]
        type Request =
            { RequestBody: {| Name: IngredientName |} }

        and [<RequireQualifiedAccess>] Response =
            | Http200 of value: Ingredient
            | Http400 of value: (ProblemDetail * {| Violations: {| Field: string; Message: string |} [] |})
            | Http401
            | Http404 of value: (ProblemDetail * {| Violations: {| Field: string; Message: string |} [] |})
            | Default of value: ProblemDetail

        type IHandler =
            val Handle: Request -> Response

        let handle (handler: #IHandler) (request: Request) =
            match handler.Handle request with
            | Response.Http200 value -> text "Put on /ingredients/{id}/name returned Http200"
            | Response.Http400 value -> text "Put on /ingredients/{id}/name returned Http400"
            | Response.Http401 -> text "Put on /ingredients/{id}/name returned Http401"
            | Response.Http404 value -> text "Put on /ingredients/{id}/name returned Http404"
            | Response.Default value -> text "Put on /ingredients/{id}/name returned Default"

    [<RequireQualifiedAccess>]
    module SetIngredientImage =
        open Models
        [<RequireQualifiedAccess>]
        type Request =
            { RequestBody: {| Image: IngredientName |} }

        and [<RequireQualifiedAccess>] Response =
            | Http200 of value: Ingredient
            | Http400 of value: (ProblemDetail * {| Violations: {| Field: string; Message: string |} [] |})
            | Http401
            | Http404 of value: (ProblemDetail * {| Violations: {| Field: string; Message: string |} [] |})
            | Default of value: ProblemDetail

        type IHandler =
            val Handle: Request -> Response

        let handle (handler: #IHandler) (request: Request) =
            match handler.Handle request with
            | Response.Http200 value -> text "Put on /ingredients/{id}/image returned Http200"
            | Response.Http400 value -> text "Put on /ingredients/{id}/image returned Http400"
            | Response.Http401 -> text "Put on /ingredients/{id}/image returned Http401"
            | Response.Http404 value -> text "Put on /ingredients/{id}/image returned Http404"
            | Response.Default value -> text "Put on /ingredients/{id}/image returned Default"

    [<RequireQualifiedAccess>]
    module UnsetIngredientImage =
        open Models
        [<RequireQualifiedAccess>]
        type Response =
            | Http200 of value: Ingredient
            | Http400 of value: (ProblemDetail * {| Violations: {| Field: string; Message: string |} [] |})
            | Http401
            | Http404 of value: (ProblemDetail * {| Violations: {| Field: string; Message: string |} [] |})
            | Default of value: ProblemDetail

        type IHandler =
            val Handle: unit -> Response

        let handle (handler: #IHandler) =
            match handler.Handle() with
            | Response.Http200 value -> text "Delete on /ingredients/{id}/image returned Http200"
            | Response.Http400 value -> text "Delete on /ingredients/{id}/image returned Http400"
            | Response.Http401 -> text "Delete on /ingredients/{id}/image returned Http401"
            | Response.Http404 value -> text "Delete on /ingredients/{id}/image returned Http404"
            | Response.Default value -> text "Delete on /ingredients/{id}/image returned Default"

    [<RequireQualifiedAccess>]
    module ChangeIngredientType =
        open Models
        [<RequireQualifiedAccess>]
        type Request =
            { RequestBody: {| Type: IngredientType |} }

        and [<RequireQualifiedAccess>] Response =
            | Http200 of value: Ingredient
            | Http400 of value: (ProblemDetail * {| Violations: {| Field: string; Message: string |} [] |})
            | Http401
            | Http404 of value: (ProblemDetail * {| Violations: {| Field: string; Message: string |} [] |})
            | Default of value: ProblemDetail

        type IHandler =
            val Handle: Request -> Response

        let handle (handler: #IHandler) (request: Request) =
            match handler.Handle request with
            | Response.Http200 value -> text "Put on /ingredients/{id}/type returned Http200"
            | Response.Http400 value -> text "Put on /ingredients/{id}/type returned Http400"
            | Response.Http401 -> text "Put on /ingredients/{id}/type returned Http401"
            | Response.Http404 value -> text "Put on /ingredients/{id}/type returned Http404"
            | Response.Default value -> text "Put on /ingredients/{id}/type returned Default"
